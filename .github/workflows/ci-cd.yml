name: CI/CD Pipeline with SonarQube

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '17'
  MAVEN_VERSION: '3.9.0'
  SONAR_PROJECT_KEY: calculator-app
  DOCKER_IMAGE: calculator-app

jobs:
  test-and-analysis:
    name: Tests & Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 📋 Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: 🔨 Build application
      run: |
        echo "🔨 Building the application..."
        mvn clean compile -B -V
        echo "✅ Build completed successfully"

    - name: 🧪 Run unit tests
      run: |
        echo "🧪 Running unit tests..."
        mvn test -B
        echo "✅ Unit tests completed"

    - name: 📊 Generate test reports
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

    - name: 📈 Generate JaCoCo coverage report
      run: |
        echo "📈 Generating code coverage report..."
        mvn jacoco:report

    - name: 📋 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella

    - name: 🔍 SonarQube analysis
      uses: sonarsource/sonarqube-scan-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        projectBaseDir: .
        args: >
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
          -Dsonar.java.binaries=target/classes
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
          -Dsonar.junit.reportPaths=target/surefire-reports

    - name: 🚪 SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@v1
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: 📦 Build JAR artifact
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: |
        echo "📦 Building JAR artifact..."
        mvn package -DskipTests -B
        echo "✅ JAR artifact built successfully"

    - name: 📋 Upload JAR artifact
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      uses: actions/upload-artifact@v4
      with:
        name: calculator-app-jar
        path: target/*.jar
        retention-days: 30

  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: test-and-analysis
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4

    - name: 📋 Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: calculator-app-jar
        path: target/

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🐳 Build Docker image
      run: |
        echo "🐳 Building Docker image..."
        docker build -f docker/Dockerfile -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
        docker tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} ${{ env.DOCKER_IMAGE }}:latest
        echo "✅ Docker image built successfully"

    - name: 🧪 Test Docker image
      run: |
        echo "🧪 Testing Docker image..."
        docker run --rm -d --name test-container -p 8080:8080 ${{ env.DOCKER_IMAGE }}:latest
        sleep 30
        curl -f http://localhost:8080/ || (docker logs test-container && exit 1)
        docker stop test-container
        echo "✅ Docker image test passed"

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test-and-analysis
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 🛡️ Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@1.1.0
      with:
        project: 'calculator-app'
        path: '.'
        format: 'XML'
        out: 'reports'

    - name: 📋 Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: reports/
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "This would typically involve:"
        echo "  - Connecting to staging server"
        echo "  - Pulling the latest Docker image"
        echo "  - Stopping old container"
        echo "  - Starting new container"
        echo "  - Running health checks"
        echo "✅ Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "This would typically involve:"
        echo "  - Connecting to production server"
        echo "  - Pulling the latest Docker image"
        echo "  - Blue-green or rolling deployment"
        echo "  - Running comprehensive health checks"
        echo "  - Updating load balancer"
        echo "✅ Production deployment completed"

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test-and-analysis, docker-build]
    if: always()

    steps:
    - name: 📧 Send notification
      run: |
        if [ "${{ needs.test-and-analysis.result }}" == "success" ]; then
          echo "✅ Pipeline completed successfully!"
          echo "All tests passed and code quality checks are good."
        else
          echo "❌ Pipeline failed!"
          echo "Please check the logs for more details."
        fi
